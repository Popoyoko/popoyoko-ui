import React from "react";
declare const Button: {
    ({ type, label, typeSvg, children, onClick, value }: {
        type?: string;
        label: any;
        typeSvg: any;
        children: any;
        onClick: any;
        value: any;
    }): React.FunctionComponentElement<{
        ref?: React.LegacyRef<HTMLButtonElement>;
        key?: React.Key;
        disabled?: boolean;
        form?: string;
        formAction?: string;
        formEncType?: string;
        formMethod?: string;
        formNoValidate?: boolean;
        formTarget?: string;
        name?: string;
        type?: "button" | "submit" | "reset";
        value?: string | number | readonly string[];
        defaultChecked?: boolean;
        defaultValue?: string | number | readonly string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        autoFocus?: boolean;
        className?: string;
        contentEditable?: "inherit" | (boolean | "true" | "false");
        contextMenu?: string;
        dir?: string;
        draggable?: boolean | "true" | "false";
        hidden?: boolean;
        id?: string;
        lang?: string;
        nonce?: string;
        placeholder?: string;
        slot?: string;
        spellCheck?: boolean | "true" | "false";
        style?: React.CSSProperties;
        tabIndex?: number;
        title?: string;
        translate?: "yes" | "no";
        radioGroup?: string;
        role?: React.AriaRole;
        about?: string;
        content?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        rel?: string;
        resource?: string;
        rev?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
        is?: string;
        "aria-activedescendant"?: string;
        "aria-atomic"?: boolean | "true" | "false";
        "aria-autocomplete"?: "none" | "list" | "inline" | "both";
        "aria-braillelabel"?: string;
        "aria-brailleroledescription"?: string;
        "aria-busy"?: boolean | "true" | "false";
        "aria-checked"?: boolean | "true" | "false" | "mixed";
        "aria-colcount"?: number;
        "aria-colindex"?: number;
        "aria-colindextext"?: string;
        "aria-colspan"?: number;
        "aria-controls"?: string;
        "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
        "aria-describedby"?: string;
        "aria-description"?: string;
        "aria-details"?: string;
        "aria-disabled"?: boolean | "true" | "false";
        "aria-dropeffect"?: "none" | "link" | "copy" | "execute" | "move" | "popup";
        "aria-errormessage"?: string;
        "aria-expanded"?: boolean | "true" | "false";
        "aria-flowto"?: string;
        "aria-grabbed"?: boolean | "true" | "false";
        "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
        "aria-hidden"?: boolean | "true" | "false";
        "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
        "aria-keyshortcuts"?: string;
        "aria-label"?: string;
        "aria-labelledby"?: string;
        "aria-level"?: number;
        "aria-live"?: "off" | "assertive" | "polite";
        "aria-modal"?: boolean | "true" | "false";
        "aria-multiline"?: boolean | "true" | "false";
        "aria-multiselectable"?: boolean | "true" | "false";
        "aria-orientation"?: "horizontal" | "vertical";
        "aria-owns"?: string;
        "aria-placeholder"?: string;
        "aria-posinset"?: number;
        "aria-pressed"?: boolean | "true" | "false" | "mixed";
        "aria-readonly"?: boolean | "true" | "false";
        "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        "aria-required"?: boolean | "true" | "false";
        "aria-roledescription"?: string;
        "aria-rowcount"?: number;
        "aria-rowindex"?: number;
        "aria-rowindextext"?: string;
        "aria-rowspan"?: number;
        "aria-selected"?: boolean | "true" | "false";
        "aria-setsize"?: number;
        "aria-sort"?: "none" | "ascending" | "descending" | "other";
        "aria-valuemax"?: number;
        "aria-valuemin"?: number;
        "aria-valuenow"?: number;
        "aria-valuetext"?: string;
        children?: React.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        };
        onCopy?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCopyCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCut?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCutCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onPaste?: React.ClipboardEventHandler<HTMLButtonElement>;
        onPasteCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCompositionEnd?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionStart?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onFocus?: React.FocusEventHandler<HTMLButtonElement>;
        onFocusCapture?: React.FocusEventHandler<HTMLButtonElement>;
        onBlur?: React.FocusEventHandler<HTMLButtonElement>;
        onBlurCapture?: React.FocusEventHandler<HTMLButtonElement>;
        onChange?: React.FormEventHandler<HTMLButtonElement>;
        onChangeCapture?: React.FormEventHandler<HTMLButtonElement>;
        onBeforeInput?: React.FormEventHandler<HTMLButtonElement>;
        onBeforeInputCapture?: React.FormEventHandler<HTMLButtonElement>;
        onInput?: React.FormEventHandler<HTMLButtonElement>;
        onInputCapture?: React.FormEventHandler<HTMLButtonElement>;
        onReset?: React.FormEventHandler<HTMLButtonElement>;
        onResetCapture?: React.FormEventHandler<HTMLButtonElement>;
        onSubmit?: React.FormEventHandler<HTMLButtonElement>;
        onSubmitCapture?: React.FormEventHandler<HTMLButtonElement>;
        onInvalid?: React.FormEventHandler<HTMLButtonElement>;
        onInvalidCapture?: React.FormEventHandler<HTMLButtonElement>;
        onLoad?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onError?: React.ReactEventHandler<HTMLButtonElement>;
        onErrorCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onKeyDown?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyPress?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyUp?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onAbort?: React.ReactEventHandler<HTMLButtonElement>;
        onAbortCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlay?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayThrough?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onDurationChange?: React.ReactEventHandler<HTMLButtonElement>;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEmptied?: React.ReactEventHandler<HTMLButtonElement>;
        onEmptiedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEncrypted?: React.ReactEventHandler<HTMLButtonElement>;
        onEncryptedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEnded?: React.ReactEventHandler<HTMLButtonElement>;
        onEndedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedData?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedMetadata?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadStart?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadStartCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPause?: React.ReactEventHandler<HTMLButtonElement>;
        onPauseCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPlay?: React.ReactEventHandler<HTMLButtonElement>;
        onPlayCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPlaying?: React.ReactEventHandler<HTMLButtonElement>;
        onPlayingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onProgress?: React.ReactEventHandler<HTMLButtonElement>;
        onProgressCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onRateChange?: React.ReactEventHandler<HTMLButtonElement>;
        onRateChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onResize?: React.ReactEventHandler<HTMLButtonElement>;
        onResizeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSeeked?: React.ReactEventHandler<HTMLButtonElement>;
        onSeekedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSeeking?: React.ReactEventHandler<HTMLButtonElement>;
        onSeekingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onStalled?: React.ReactEventHandler<HTMLButtonElement>;
        onStalledCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSuspend?: React.ReactEventHandler<HTMLButtonElement>;
        onSuspendCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onTimeUpdate?: React.ReactEventHandler<HTMLButtonElement>;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onVolumeChange?: React.ReactEventHandler<HTMLButtonElement>;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onWaiting?: React.ReactEventHandler<HTMLButtonElement>;
        onWaitingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onAuxClick?: React.MouseEventHandler<HTMLButtonElement>;
        onAuxClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onClick?: React.MouseEventHandler<HTMLButtonElement>;
        onClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onContextMenu?: React.MouseEventHandler<HTMLButtonElement>;
        onContextMenuCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onDoubleClick?: React.MouseEventHandler<HTMLButtonElement>;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onDrag?: React.DragEventHandler<HTMLButtonElement>;
        onDragCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnd?: React.DragEventHandler<HTMLButtonElement>;
        onDragEndCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnter?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnterCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragExit?: React.DragEventHandler<HTMLButtonElement>;
        onDragExitCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragLeave?: React.DragEventHandler<HTMLButtonElement>;
        onDragLeaveCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragOver?: React.DragEventHandler<HTMLButtonElement>;
        onDragOverCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragStart?: React.DragEventHandler<HTMLButtonElement>;
        onDragStartCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDrop?: React.DragEventHandler<HTMLButtonElement>;
        onDropCapture?: React.DragEventHandler<HTMLButtonElement>;
        onMouseDown?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseDownCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseEnter?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseLeave?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseMove?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOut?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOutCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOver?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOverCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseUp?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseUpCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onSelect?: React.ReactEventHandler<HTMLButtonElement>;
        onSelectCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onTouchCancel?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchEnd?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchEndCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchMove?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchStart?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchStartCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onPointerDown?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerDownCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerMove?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerUp?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerUpCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerCancel?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerEnter?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerLeave?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOver?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOverCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOut?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOutCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onGotPointerCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onLostPointerCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onScroll?: React.UIEventHandler<HTMLButtonElement>;
        onScrollCapture?: React.UIEventHandler<HTMLButtonElement>;
        onWheel?: React.WheelEventHandler<HTMLButtonElement>;
        onWheelCapture?: React.WheelEventHandler<HTMLButtonElement>;
        onAnimationStart?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationEnd?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationIteration?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onTransitionEnd?: React.TransitionEventHandler<HTMLButtonElement>;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLButtonElement>;
    }> | React.FunctionComponentElement<{
        form?: string;
        slot?: string;
        style?: React.CSSProperties;
        title?: string;
        key?: React.Key;
        disabled?: boolean;
        formAction?: string;
        formEncType?: string;
        formMethod?: string;
        formNoValidate?: boolean;
        formTarget?: string;
        name?: string;
        type?: "button" | "submit" | "reset";
        value?: string | number | readonly string[];
        defaultChecked?: boolean;
        defaultValue?: string | number | readonly string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        autoFocus?: boolean;
        className?: string;
        contentEditable?: "inherit" | (boolean | "true" | "false");
        contextMenu?: string;
        dir?: string;
        draggable?: boolean | "true" | "false";
        hidden?: boolean;
        id?: string;
        lang?: string;
        nonce?: string;
        placeholder?: string;
        spellCheck?: boolean | "true" | "false";
        tabIndex?: number;
        translate?: "yes" | "no";
        radioGroup?: string;
        role?: React.AriaRole;
        about?: string;
        content?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        rel?: string;
        resource?: string;
        rev?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
        is?: string;
        "aria-activedescendant"?: string;
        "aria-atomic"?: boolean | "true" | "false";
        "aria-autocomplete"?: "none" | "list" | "inline" | "both";
        "aria-braillelabel"?: string;
        "aria-brailleroledescription"?: string;
        "aria-busy"?: boolean | "true" | "false";
        "aria-checked"?: boolean | "true" | "false" | "mixed";
        "aria-colcount"?: number;
        "aria-colindex"?: number;
        "aria-colindextext"?: string;
        "aria-colspan"?: number;
        "aria-controls"?: string;
        "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
        "aria-describedby"?: string;
        "aria-description"?: string;
        "aria-details"?: string;
        "aria-disabled"?: boolean | "true" | "false";
        "aria-dropeffect"?: "none" | "link" | "copy" | "execute" | "move" | "popup";
        "aria-errormessage"?: string;
        "aria-expanded"?: boolean | "true" | "false";
        "aria-flowto"?: string;
        "aria-grabbed"?: boolean | "true" | "false";
        "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
        "aria-hidden"?: boolean | "true" | "false";
        "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
        "aria-keyshortcuts"?: string;
        "aria-label"?: string;
        "aria-labelledby"?: string;
        "aria-level"?: number;
        "aria-live"?: "off" | "assertive" | "polite";
        "aria-modal"?: boolean | "true" | "false";
        "aria-multiline"?: boolean | "true" | "false";
        "aria-multiselectable"?: boolean | "true" | "false";
        "aria-orientation"?: "horizontal" | "vertical";
        "aria-owns"?: string;
        "aria-placeholder"?: string;
        "aria-posinset"?: number;
        "aria-pressed"?: boolean | "true" | "false" | "mixed";
        "aria-readonly"?: boolean | "true" | "false";
        "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        "aria-required"?: boolean | "true" | "false";
        "aria-roledescription"?: string;
        "aria-rowcount"?: number;
        "aria-rowindex"?: number;
        "aria-rowindextext"?: string;
        "aria-rowspan"?: number;
        "aria-selected"?: boolean | "true" | "false";
        "aria-setsize"?: number;
        "aria-sort"?: "none" | "ascending" | "descending" | "other";
        "aria-valuemax"?: number;
        "aria-valuemin"?: number;
        "aria-valuenow"?: number;
        "aria-valuetext"?: string;
        children?: React.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        };
        onCopy?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCopyCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCut?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCutCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onPaste?: React.ClipboardEventHandler<HTMLButtonElement>;
        onPasteCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCompositionEnd?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionStart?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onFocus?: React.FocusEventHandler<HTMLButtonElement>;
        onFocusCapture?: React.FocusEventHandler<HTMLButtonElement>;
        onBlur?: React.FocusEventHandler<HTMLButtonElement>;
        onBlurCapture?: React.FocusEventHandler<HTMLButtonElement>;
        onChange?: React.FormEventHandler<HTMLButtonElement>;
        onChangeCapture?: React.FormEventHandler<HTMLButtonElement>;
        onBeforeInput?: React.FormEventHandler<HTMLButtonElement>;
        onBeforeInputCapture?: React.FormEventHandler<HTMLButtonElement>;
        onInput?: React.FormEventHandler<HTMLButtonElement>;
        onInputCapture?: React.FormEventHandler<HTMLButtonElement>;
        onReset?: React.FormEventHandler<HTMLButtonElement>;
        onResetCapture?: React.FormEventHandler<HTMLButtonElement>;
        onSubmit?: React.FormEventHandler<HTMLButtonElement>;
        onSubmitCapture?: React.FormEventHandler<HTMLButtonElement>;
        onInvalid?: React.FormEventHandler<HTMLButtonElement>;
        onInvalidCapture?: React.FormEventHandler<HTMLButtonElement>;
        onLoad?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onError?: React.ReactEventHandler<HTMLButtonElement>;
        onErrorCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onKeyDown?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyPress?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyUp?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onAbort?: React.ReactEventHandler<HTMLButtonElement>;
        onAbortCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlay?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayThrough?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onDurationChange?: React.ReactEventHandler<HTMLButtonElement>;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEmptied?: React.ReactEventHandler<HTMLButtonElement>;
        onEmptiedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEncrypted?: React.ReactEventHandler<HTMLButtonElement>;
        onEncryptedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEnded?: React.ReactEventHandler<HTMLButtonElement>;
        onEndedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedData?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedMetadata?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadStart?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadStartCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPause?: React.ReactEventHandler<HTMLButtonElement>;
        onPauseCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPlay?: React.ReactEventHandler<HTMLButtonElement>;
        onPlayCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPlaying?: React.ReactEventHandler<HTMLButtonElement>;
        onPlayingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onProgress?: React.ReactEventHandler<HTMLButtonElement>;
        onProgressCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onRateChange?: React.ReactEventHandler<HTMLButtonElement>;
        onRateChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onResize?: React.ReactEventHandler<HTMLButtonElement>;
        onResizeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSeeked?: React.ReactEventHandler<HTMLButtonElement>;
        onSeekedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSeeking?: React.ReactEventHandler<HTMLButtonElement>;
        onSeekingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onStalled?: React.ReactEventHandler<HTMLButtonElement>;
        onStalledCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSuspend?: React.ReactEventHandler<HTMLButtonElement>;
        onSuspendCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onTimeUpdate?: React.ReactEventHandler<HTMLButtonElement>;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onVolumeChange?: React.ReactEventHandler<HTMLButtonElement>;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onWaiting?: React.ReactEventHandler<HTMLButtonElement>;
        onWaitingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onAuxClick?: React.MouseEventHandler<HTMLButtonElement>;
        onAuxClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onClick?: React.MouseEventHandler<HTMLButtonElement>;
        onClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onContextMenu?: React.MouseEventHandler<HTMLButtonElement>;
        onContextMenuCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onDoubleClick?: React.MouseEventHandler<HTMLButtonElement>;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onDrag?: React.DragEventHandler<HTMLButtonElement>;
        onDragCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnd?: React.DragEventHandler<HTMLButtonElement>;
        onDragEndCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnter?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnterCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragExit?: React.DragEventHandler<HTMLButtonElement>;
        onDragExitCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragLeave?: React.DragEventHandler<HTMLButtonElement>;
        onDragLeaveCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragOver?: React.DragEventHandler<HTMLButtonElement>;
        onDragOverCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragStart?: React.DragEventHandler<HTMLButtonElement>;
        onDragStartCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDrop?: React.DragEventHandler<HTMLButtonElement>;
        onDropCapture?: React.DragEventHandler<HTMLButtonElement>;
        onMouseDown?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseDownCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseEnter?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseLeave?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseMove?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOut?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOutCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOver?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOverCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseUp?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseUpCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onSelect?: React.ReactEventHandler<HTMLButtonElement>;
        onSelectCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onTouchCancel?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchEnd?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchEndCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchMove?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchStart?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchStartCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onPointerDown?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerDownCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerMove?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerUp?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerUpCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerCancel?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerEnter?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerLeave?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOver?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOverCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOut?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOutCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onGotPointerCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onLostPointerCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onScroll?: React.UIEventHandler<HTMLButtonElement>;
        onScrollCapture?: React.UIEventHandler<HTMLButtonElement>;
        onWheel?: React.WheelEventHandler<HTMLButtonElement>;
        onWheelCapture?: React.WheelEventHandler<HTMLButtonElement>;
        onAnimationStart?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationEnd?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationIteration?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onTransitionEnd?: React.TransitionEventHandler<HTMLButtonElement>;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLButtonElement>;
        ref?: React.Ref<HTMLButtonElement>;
    }>;
    Primary(props: any): React.FunctionComponentElement<{
        type?: string;
        label: any;
        typeSvg: any;
        children: any;
        onClick: any;
        value: any;
    }>;
    Secondary(props: any): React.FunctionComponentElement<{
        type?: string;
        label: any;
        typeSvg: any;
        children: any;
        onClick: any;
        value: any;
    }>;
    Tertiary(props: any): React.FunctionComponentElement<{
        type?: string;
        label: any;
        typeSvg: any;
        children: any;
        onClick: any;
        value: any;
    }>;
};
export default Button;
