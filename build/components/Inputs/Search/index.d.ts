import React from "react";
export declare const InputSearch: ({ placeholder, onChange, onSubmit }: {
    placeholder: any;
    onChange: any;
    onSubmit: any;
}) => React.FunctionComponentElement<{
    ref?: React.LegacyRef<HTMLFormElement>;
    key?: React.Key;
    acceptCharset?: string;
    action?: string;
    autoComplete?: string;
    encType?: string;
    method?: string;
    name?: string;
    noValidate?: boolean;
    target?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    placeholder?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "search" | "text" | "email" | "tel" | "url" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "none" | "list" | "inline" | "both";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "step" | "date" | "true" | "false" | "page" | "location";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "none" | "link" | "copy" | "execute" | "move" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLFormElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLFormElement>;
    onCut?: React.ClipboardEventHandler<HTMLFormElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLFormElement>;
    onPaste?: React.ClipboardEventHandler<HTMLFormElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLFormElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLFormElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLFormElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLFormElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLFormElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLFormElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLFormElement>;
    onFocus?: React.FocusEventHandler<HTMLFormElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLFormElement>;
    onBlur?: React.FocusEventHandler<HTMLFormElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLFormElement>;
    onChange?: React.FormEventHandler<HTMLFormElement>;
    onChangeCapture?: React.FormEventHandler<HTMLFormElement>;
    onBeforeInput?: React.FormEventHandler<HTMLFormElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLFormElement>;
    onInput?: React.FormEventHandler<HTMLFormElement>;
    onInputCapture?: React.FormEventHandler<HTMLFormElement>;
    onReset?: React.FormEventHandler<HTMLFormElement>;
    onResetCapture?: React.FormEventHandler<HTMLFormElement>;
    onSubmit?: React.FormEventHandler<HTMLFormElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLFormElement>;
    onInvalid?: React.FormEventHandler<HTMLFormElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLFormElement>;
    onLoad?: React.ReactEventHandler<HTMLFormElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLFormElement>;
    onError?: React.ReactEventHandler<HTMLFormElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLFormElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLFormElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLFormElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLFormElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLFormElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLFormElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLFormElement>;
    onAbort?: React.ReactEventHandler<HTMLFormElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLFormElement>;
    onCanPlay?: React.ReactEventHandler<HTMLFormElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLFormElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLFormElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLFormElement>;
    onDurationChange?: React.ReactEventHandler<HTMLFormElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLFormElement>;
    onEmptied?: React.ReactEventHandler<HTMLFormElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLFormElement>;
    onEncrypted?: React.ReactEventHandler<HTMLFormElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLFormElement>;
    onEnded?: React.ReactEventHandler<HTMLFormElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLFormElement>;
    onLoadedData?: React.ReactEventHandler<HTMLFormElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLFormElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLFormElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLFormElement>;
    onLoadStart?: React.ReactEventHandler<HTMLFormElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLFormElement>;
    onPause?: React.ReactEventHandler<HTMLFormElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLFormElement>;
    onPlay?: React.ReactEventHandler<HTMLFormElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLFormElement>;
    onPlaying?: React.ReactEventHandler<HTMLFormElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLFormElement>;
    onProgress?: React.ReactEventHandler<HTMLFormElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLFormElement>;
    onRateChange?: React.ReactEventHandler<HTMLFormElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLFormElement>;
    onResize?: React.ReactEventHandler<HTMLFormElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLFormElement>;
    onSeeked?: React.ReactEventHandler<HTMLFormElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLFormElement>;
    onSeeking?: React.ReactEventHandler<HTMLFormElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLFormElement>;
    onStalled?: React.ReactEventHandler<HTMLFormElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLFormElement>;
    onSuspend?: React.ReactEventHandler<HTMLFormElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLFormElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLFormElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLFormElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLFormElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLFormElement>;
    onWaiting?: React.ReactEventHandler<HTMLFormElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLFormElement>;
    onAuxClick?: React.MouseEventHandler<HTMLFormElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLFormElement>;
    onClick?: React.MouseEventHandler<HTMLFormElement>;
    onClickCapture?: React.MouseEventHandler<HTMLFormElement>;
    onContextMenu?: React.MouseEventHandler<HTMLFormElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLFormElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLFormElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLFormElement>;
    onDrag?: React.DragEventHandler<HTMLFormElement>;
    onDragCapture?: React.DragEventHandler<HTMLFormElement>;
    onDragEnd?: React.DragEventHandler<HTMLFormElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLFormElement>;
    onDragEnter?: React.DragEventHandler<HTMLFormElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLFormElement>;
    onDragExit?: React.DragEventHandler<HTMLFormElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLFormElement>;
    onDragLeave?: React.DragEventHandler<HTMLFormElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLFormElement>;
    onDragOver?: React.DragEventHandler<HTMLFormElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLFormElement>;
    onDragStart?: React.DragEventHandler<HTMLFormElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLFormElement>;
    onDrop?: React.DragEventHandler<HTMLFormElement>;
    onDropCapture?: React.DragEventHandler<HTMLFormElement>;
    onMouseDown?: React.MouseEventHandler<HTMLFormElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLFormElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLFormElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLFormElement>;
    onMouseMove?: React.MouseEventHandler<HTMLFormElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLFormElement>;
    onMouseOut?: React.MouseEventHandler<HTMLFormElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLFormElement>;
    onMouseOver?: React.MouseEventHandler<HTMLFormElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLFormElement>;
    onMouseUp?: React.MouseEventHandler<HTMLFormElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLFormElement>;
    onSelect?: React.ReactEventHandler<HTMLFormElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLFormElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLFormElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLFormElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLFormElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLFormElement>;
    onTouchMove?: React.TouchEventHandler<HTMLFormElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLFormElement>;
    onTouchStart?: React.TouchEventHandler<HTMLFormElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLFormElement>;
    onPointerDown?: React.PointerEventHandler<HTMLFormElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLFormElement>;
    onPointerMove?: React.PointerEventHandler<HTMLFormElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLFormElement>;
    onPointerUp?: React.PointerEventHandler<HTMLFormElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLFormElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLFormElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLFormElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLFormElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLFormElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLFormElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLFormElement>;
    onPointerOver?: React.PointerEventHandler<HTMLFormElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLFormElement>;
    onPointerOut?: React.PointerEventHandler<HTMLFormElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLFormElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLFormElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLFormElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLFormElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLFormElement>;
    onScroll?: React.UIEventHandler<HTMLFormElement>;
    onScrollCapture?: React.UIEventHandler<HTMLFormElement>;
    onWheel?: React.WheelEventHandler<HTMLFormElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLFormElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLFormElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLFormElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLFormElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLFormElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLFormElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLFormElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLFormElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLFormElement>;
}>;
